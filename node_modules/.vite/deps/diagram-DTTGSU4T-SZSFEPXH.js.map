{
  "version": 3,
  "sources": ["../../mermaid/dist/chunks/mermaid.core/diagram-DTTGSU4T.mjs"],
  "sourcesContent": ["import {\r\n  populateCommonDb\r\n} from \"./chunk-44GW5IO5.mjs\";\r\nimport {\r\n  cleanAndMerge\r\n} from \"./chunk-F7MYA6JM.mjs\";\r\nimport {\r\n  selectSvgElement\r\n} from \"./chunk-D33BOVEP.mjs\";\r\nimport {\r\n  __name,\r\n  clear,\r\n  defaultConfig_default,\r\n  getAccDescription,\r\n  getAccTitle,\r\n  getConfig,\r\n  getDiagramTitle,\r\n  getThemeVariables,\r\n  log,\r\n  setAccDescription,\r\n  setAccTitle,\r\n  setDiagramTitle\r\n} from \"./chunk-BMRFU3JQ.mjs\";\r\n\r\n// src/diagrams/radar/db.ts\r\nvar defaultOptions = {\r\n  showLegend: true,\r\n  ticks: 5,\r\n  max: null,\r\n  min: 0,\r\n  graticule: \"circle\"\r\n};\r\nvar defaultRadarData = {\r\n  axes: [],\r\n  curves: [],\r\n  options: defaultOptions\r\n};\r\nvar data = structuredClone(defaultRadarData);\r\nvar DEFAULT_RADAR_CONFIG = defaultConfig_default.radar;\r\nvar getConfig2 = /* @__PURE__ */ __name(() => {\r\n  const config = cleanAndMerge({\r\n    ...DEFAULT_RADAR_CONFIG,\r\n    ...getConfig().radar\r\n  });\r\n  return config;\r\n}, \"getConfig\");\r\nvar getAxes = /* @__PURE__ */ __name(() => data.axes, \"getAxes\");\r\nvar getCurves = /* @__PURE__ */ __name(() => data.curves, \"getCurves\");\r\nvar getOptions = /* @__PURE__ */ __name(() => data.options, \"getOptions\");\r\nvar setAxes = /* @__PURE__ */ __name((axes) => {\r\n  data.axes = axes.map((axis) => {\r\n    return {\r\n      name: axis.name,\r\n      label: axis.label ?? axis.name\r\n    };\r\n  });\r\n}, \"setAxes\");\r\nvar setCurves = /* @__PURE__ */ __name((curves) => {\r\n  data.curves = curves.map((curve) => {\r\n    return {\r\n      name: curve.name,\r\n      label: curve.label ?? curve.name,\r\n      entries: computeCurveEntries(curve.entries)\r\n    };\r\n  });\r\n}, \"setCurves\");\r\nvar computeCurveEntries = /* @__PURE__ */ __name((entries) => {\r\n  if (entries[0].axis == void 0) {\r\n    return entries.map((entry) => entry.value);\r\n  }\r\n  const axes = getAxes();\r\n  if (axes.length === 0) {\r\n    throw new Error(\"Axes must be populated before curves for reference entries\");\r\n  }\r\n  return axes.map((axis) => {\r\n    const entry = entries.find((entry2) => entry2.axis?.$refText === axis.name);\r\n    if (entry === void 0) {\r\n      throw new Error(\"Missing entry for axis \" + axis.label);\r\n    }\r\n    return entry.value;\r\n  });\r\n}, \"computeCurveEntries\");\r\nvar setOptions = /* @__PURE__ */ __name((options) => {\r\n  const optionMap = options.reduce(\r\n    (acc, option) => {\r\n      acc[option.name] = option;\r\n      return acc;\r\n    },\r\n    {}\r\n  );\r\n  data.options = {\r\n    showLegend: optionMap.showLegend?.value ?? defaultOptions.showLegend,\r\n    ticks: optionMap.ticks?.value ?? defaultOptions.ticks,\r\n    max: optionMap.max?.value ?? defaultOptions.max,\r\n    min: optionMap.min?.value ?? defaultOptions.min,\r\n    graticule: optionMap.graticule?.value ?? defaultOptions.graticule\r\n  };\r\n}, \"setOptions\");\r\nvar clear2 = /* @__PURE__ */ __name(() => {\r\n  clear();\r\n  data = structuredClone(defaultRadarData);\r\n}, \"clear\");\r\nvar db = {\r\n  getAxes,\r\n  getCurves,\r\n  getOptions,\r\n  setAxes,\r\n  setCurves,\r\n  setOptions,\r\n  getConfig: getConfig2,\r\n  clear: clear2,\r\n  setAccTitle,\r\n  getAccTitle,\r\n  setDiagramTitle,\r\n  getDiagramTitle,\r\n  getAccDescription,\r\n  setAccDescription\r\n};\r\n\r\n// src/diagrams/radar/parser.ts\r\nimport { parse } from \"@mermaid-js/parser\";\r\nvar populate = /* @__PURE__ */ __name((ast) => {\r\n  populateCommonDb(ast, db);\r\n  const { axes, curves, options } = ast;\r\n  db.setAxes(axes);\r\n  db.setCurves(curves);\r\n  db.setOptions(options);\r\n}, \"populate\");\r\nvar parser = {\r\n  parse: /* @__PURE__ */ __name(async (input) => {\r\n    const ast = await parse(\"radar\", input);\r\n    log.debug(ast);\r\n    populate(ast);\r\n  }, \"parse\")\r\n};\r\n\r\n// src/diagrams/radar/renderer.ts\r\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\r\n  const db2 = diagram2.db;\r\n  const axes = db2.getAxes();\r\n  const curves = db2.getCurves();\r\n  const options = db2.getOptions();\r\n  const config = db2.getConfig();\r\n  const title = db2.getDiagramTitle();\r\n  const svg = selectSvgElement(id);\r\n  const g = drawFrame(svg, config);\r\n  const maxValue = options.max ?? Math.max(...curves.map((curve) => Math.max(...curve.entries)));\r\n  const minValue = options.min;\r\n  const radius = Math.min(config.width, config.height) / 2;\r\n  drawGraticule(g, axes, radius, options.ticks, options.graticule);\r\n  drawAxes(g, axes, radius, config);\r\n  drawCurves(g, axes, curves, minValue, maxValue, options.graticule, config);\r\n  drawLegend(g, curves, options.showLegend, config);\r\n  g.append(\"text\").attr(\"class\", \"radarTitle\").text(title).attr(\"x\", 0).attr(\"y\", -config.height / 2 - config.marginTop);\r\n}, \"draw\");\r\nvar drawFrame = /* @__PURE__ */ __name((svg, config) => {\r\n  const totalWidth = config.width + config.marginLeft + config.marginRight;\r\n  const totalHeight = config.height + config.marginTop + config.marginBottom;\r\n  const center = {\r\n    x: config.marginLeft + config.width / 2,\r\n    y: config.marginTop + config.height / 2\r\n  };\r\n  svg.attr(\"viewbox\", `0 0 ${totalWidth} ${totalHeight}`).attr(\"width\", totalWidth).attr(\"height\", totalHeight);\r\n  return svg.append(\"g\").attr(\"transform\", `translate(${center.x}, ${center.y})`);\r\n}, \"drawFrame\");\r\nvar drawGraticule = /* @__PURE__ */ __name((g, axes, radius, ticks, graticule) => {\r\n  if (graticule === \"circle\") {\r\n    for (let i = 0; i < ticks; i++) {\r\n      const r = radius * (i + 1) / ticks;\r\n      g.append(\"circle\").attr(\"r\", r).attr(\"class\", \"radarGraticule\");\r\n    }\r\n  } else if (graticule === \"polygon\") {\r\n    const numAxes = axes.length;\r\n    for (let i = 0; i < ticks; i++) {\r\n      const r = radius * (i + 1) / ticks;\r\n      const points = axes.map((_, j) => {\r\n        const angle = 2 * j * Math.PI / numAxes - Math.PI / 2;\r\n        const x = r * Math.cos(angle);\r\n        const y = r * Math.sin(angle);\r\n        return `${x},${y}`;\r\n      }).join(\" \");\r\n      g.append(\"polygon\").attr(\"points\", points).attr(\"class\", \"radarGraticule\");\r\n    }\r\n  }\r\n}, \"drawGraticule\");\r\nvar drawAxes = /* @__PURE__ */ __name((g, axes, radius, config) => {\r\n  const numAxes = axes.length;\r\n  for (let i = 0; i < numAxes; i++) {\r\n    const label = axes[i].label;\r\n    const angle = 2 * i * Math.PI / numAxes - Math.PI / 2;\r\n    g.append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", radius * config.axisScaleFactor * Math.cos(angle)).attr(\"y2\", radius * config.axisScaleFactor * Math.sin(angle)).attr(\"class\", \"radarAxisLine\");\r\n    g.append(\"text\").text(label).attr(\"x\", radius * config.axisLabelFactor * Math.cos(angle)).attr(\"y\", radius * config.axisLabelFactor * Math.sin(angle)).attr(\"class\", \"radarAxisLabel\");\r\n  }\r\n}, \"drawAxes\");\r\nfunction drawCurves(g, axes, curves, minValue, maxValue, graticule, config) {\r\n  const numAxes = axes.length;\r\n  const radius = Math.min(config.width, config.height) / 2;\r\n  curves.forEach((curve, index) => {\r\n    if (curve.entries.length !== numAxes) {\r\n      return;\r\n    }\r\n    const points = curve.entries.map((entry, i) => {\r\n      const angle = 2 * Math.PI * i / numAxes - Math.PI / 2;\r\n      const r = relativeRadius(entry, minValue, maxValue, radius);\r\n      const x = r * Math.cos(angle);\r\n      const y = r * Math.sin(angle);\r\n      return { x, y };\r\n    });\r\n    if (graticule === \"circle\") {\r\n      g.append(\"path\").attr(\"d\", closedRoundCurve(points, config.curveTension)).attr(\"class\", `radarCurve-${index}`);\r\n    } else if (graticule === \"polygon\") {\r\n      g.append(\"polygon\").attr(\"points\", points.map((p) => `${p.x},${p.y}`).join(\" \")).attr(\"class\", `radarCurve-${index}`);\r\n    }\r\n  });\r\n}\r\n__name(drawCurves, \"drawCurves\");\r\nfunction relativeRadius(value, minValue, maxValue, radius) {\r\n  const clippedValue = Math.min(Math.max(value, minValue), maxValue);\r\n  return radius * (clippedValue - minValue) / (maxValue - minValue);\r\n}\r\n__name(relativeRadius, \"relativeRadius\");\r\nfunction closedRoundCurve(points, tension) {\r\n  const numPoints = points.length;\r\n  let d = `M${points[0].x},${points[0].y}`;\r\n  for (let i = 0; i < numPoints; i++) {\r\n    const p0 = points[(i - 1 + numPoints) % numPoints];\r\n    const p1 = points[i];\r\n    const p2 = points[(i + 1) % numPoints];\r\n    const p3 = points[(i + 2) % numPoints];\r\n    const cp1 = {\r\n      x: p1.x + (p2.x - p0.x) * tension,\r\n      y: p1.y + (p2.y - p0.y) * tension\r\n    };\r\n    const cp2 = {\r\n      x: p2.x - (p3.x - p1.x) * tension,\r\n      y: p2.y - (p3.y - p1.y) * tension\r\n    };\r\n    d += ` C${cp1.x},${cp1.y} ${cp2.x},${cp2.y} ${p2.x},${p2.y}`;\r\n  }\r\n  return `${d} Z`;\r\n}\r\n__name(closedRoundCurve, \"closedRoundCurve\");\r\nfunction drawLegend(g, curves, showLegend, config) {\r\n  if (!showLegend) {\r\n    return;\r\n  }\r\n  const legendX = (config.width / 2 + config.marginRight) * 3 / 4;\r\n  const legendY = -(config.height / 2 + config.marginTop) * 3 / 4;\r\n  const lineHeight = 20;\r\n  curves.forEach((curve, index) => {\r\n    const itemGroup = g.append(\"g\").attr(\"transform\", `translate(${legendX}, ${legendY + index * lineHeight})`);\r\n    itemGroup.append(\"rect\").attr(\"width\", 12).attr(\"height\", 12).attr(\"class\", `radarLegendBox-${index}`);\r\n    itemGroup.append(\"text\").attr(\"x\", 16).attr(\"y\", 0).attr(\"class\", \"radarLegendText\").text(curve.label);\r\n  });\r\n}\r\n__name(drawLegend, \"drawLegend\");\r\nvar renderer = { draw };\r\n\r\n// src/diagrams/radar/styles.ts\r\nvar genIndexStyles = /* @__PURE__ */ __name((themeVariables, radarOptions) => {\r\n  let sections = \"\";\r\n  for (let i = 0; i < themeVariables.THEME_COLOR_LIMIT; i++) {\r\n    const indexColor = themeVariables[`cScale${i}`];\r\n    sections += `\r\n\t\t.radarCurve-${i} {\r\n\t\t\tcolor: ${indexColor};\r\n\t\t\tfill: ${indexColor};\r\n\t\t\tfill-opacity: ${radarOptions.curveOpacity};\r\n\t\t\tstroke: ${indexColor};\r\n\t\t\tstroke-width: ${radarOptions.curveStrokeWidth};\r\n\t\t}\r\n\t\t.radarLegendBox-${i} {\r\n\t\t\tfill: ${indexColor};\r\n\t\t\tfill-opacity: ${radarOptions.curveOpacity};\r\n\t\t\tstroke: ${indexColor};\r\n\t\t}\r\n\t\t`;\r\n  }\r\n  return sections;\r\n}, \"genIndexStyles\");\r\nvar buildRadarStyleOptions = /* @__PURE__ */ __name((radar) => {\r\n  const defaultThemeVariables = getThemeVariables();\r\n  const currentConfig = getConfig();\r\n  const themeVariables = cleanAndMerge(defaultThemeVariables, currentConfig.themeVariables);\r\n  const radarOptions = cleanAndMerge(themeVariables.radar, radar);\r\n  return { themeVariables, radarOptions };\r\n}, \"buildRadarStyleOptions\");\r\nvar styles = /* @__PURE__ */ __name(({ radar } = {}) => {\r\n  const { themeVariables, radarOptions } = buildRadarStyleOptions(radar);\r\n  return `\r\n\t.radarTitle {\r\n\t\tfont-size: ${themeVariables.fontSize};\r\n\t\tcolor: ${themeVariables.titleColor};\r\n\t\tdominant-baseline: hanging;\r\n\t\ttext-anchor: middle;\r\n\t}\r\n\t.radarAxisLine {\r\n\t\tstroke: ${radarOptions.axisColor};\r\n\t\tstroke-width: ${radarOptions.axisStrokeWidth};\r\n\t}\r\n\t.radarAxisLabel {\r\n\t\tdominant-baseline: middle;\r\n\t\ttext-anchor: middle;\r\n\t\tfont-size: ${radarOptions.axisLabelFontSize}px;\r\n\t\tcolor: ${radarOptions.axisColor};\r\n\t}\r\n\t.radarGraticule {\r\n\t\tfill: ${radarOptions.graticuleColor};\r\n\t\tfill-opacity: ${radarOptions.graticuleOpacity};\r\n\t\tstroke: ${radarOptions.graticuleColor};\r\n\t\tstroke-width: ${radarOptions.graticuleStrokeWidth};\r\n\t}\r\n\t.radarLegendText {\r\n\t\ttext-anchor: start;\r\n\t\tfont-size: ${radarOptions.legendFontSize}px;\r\n\t\tdominant-baseline: hanging;\r\n\t}\r\n\t${genIndexStyles(themeVariables, radarOptions)}\r\n\t`;\r\n}, \"styles\");\r\n\r\n// src/diagrams/radar/diagram.ts\r\nvar diagram = {\r\n  parser,\r\n  db,\r\n  renderer,\r\n  styles\r\n};\r\nexport {\r\n  diagram\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
